var PRIVATE_KEY = '-----BEGIN PRIVATE KEY-----\n\
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDM/4n9EMJV7PzA\n\
gQEd1/kOj9NZZzCOA9c39Hv1h1+IuwlP0S+cQeveUP2yXQ/aaxgSZvxLfWaG4gJy\n\
4Ruk2/7XUQJg2ErrjnqHrySz\n\
-----END PRIVATE KEY-----\n\
';
var GOOGLE_SPREADSHEET_ID = 'xxxx';
var CLIENT_ID = 'xxxx;
var CLIENT_SECRET = 'xxxx';
var PUBLIC_KEY_ID = 'xxxx';
var ENTERPRISE_ID = 'xxxx';

///////////////////////////////////////////////////////////////////
// Pull all users from Box write the box user count and user list
// into a Google Spreadsheet.  The spreadsheet must have two sheets.
// One sheet must be called 'User Summary' and the other sheet must
// be called 'User List'.  The Script is designed to be run nightly 
// so that a user count over time can be kept as well as a current
// user list.  See https://developer.box.com/v2.0/docs/authentication-with-jwt
// for specifics on how Box JWT authentication works.

function main() {
  var accessToken = getAccessToken();
  var userCount = 1;
  var limit = 100;
  var offset = 0;
  var userList = [];
  
  while (userCount > offset) {
    var entries = getUsersFromBox(limit, offset, accessToken);
    var users = entries['entries'];
    
    for (user in users) {
      var row = [users[user]['login'], 
                 users[user]['name'], 
                 users[user]['space_used'], 
                 users[user]['status']];
      userList.push(row);
    }
    
    userCount = entries['total_count'];
    offset = offset + limit;
  }
  writeUserCount(userCount);
  writeUserList(userList);
}

function getUsersFromBox(limit, offset, accessToken) {
  var fetchArgs = {
    headers: {
      Authorization : 'Bearer ' + accessToken
    }
  };
  
  var url = 'https://api.box.com/2.0/users?limit='+limit+'&offset='+offset;
  var response = UrlFetchApp.fetch(url, fetchArgs);
  var entries = JSON.parse(response);
  return(entries);
}

function writeUserCount(userCount) {
  var spreadsheet = SpreadsheetApp.openById(GOOGLE_SPREADSHEET_ID);
  var sheet = spreadsheet.getSheetByName('User Summary');
  var cell = sheet.getRange('A1');
  var row = sheet.getLastRow();
  var currentRow = row + 1;
  
  cell.offset(row,0).setValue(new Date());
  cell.offset(row,1).setValue(userCount);
}

function writeUserList(userList) {
  var spreadsheet = SpreadsheetApp.openById(GOOGLE_SPREADSHEET_ID);
  var sheet = spreadsheet.getSheetByName('User List');
  sheet.clear();

  // Append the headers.
  var headers = ['login','name','space used','status'];
  sheet.appendRow(headers);

  // Append the results.
  sheet.getRange(2, 1, userList.length, 4).setValues(userList);
}

function getAccessToken() {
  var fetchArgs = {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    method: 'post',
    payload: {
      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
      client_id: CLIENT_ID,
      client_secret: CLIENT_SECRET,
      assertion: generateJWT()
    }
  };

  var url = 'https://api.box.com/oauth2/token';
  var response = UrlFetchApp.fetch(url, fetchArgs);
  var entries = JSON.parse(response);

  return entries['access_token']
}

function generateJWT() {
  var header = getHeader();
  var claims = getClaims();
  var jwt = header + '.' + claims;
  var signature = Utilities.computeRsaSha256Signature(jwt, PRIVATE_KEY);
  var signed = unPad(Utilities.base64EncodeWebSafe(signature));
  return jwt + '.' + signed;
}

function getHeader() {
  var data = {
    'alg': 'RS256',
    'typ': 'JWT',
    'kid': PUBLIC_KEY_ID
  }
  return unPad(Utilities.base64EncodeWebSafe(JSON.stringify(data)));
}

function getClaims() {
  var assertionTime = new Date();
  var data = {
    'iss': CLIENT_ID,
    'sub': ENTERPRISE_ID,
    'box_sub_type': 'enterprise',
    'aud': 'https://api.box.com/oauth2/token',
    'jti': Utilities.getUuid(),
    'exp': Math.round(assertionTime.getTime() / 1000 + 60)
  }
  return unPad(Utilities.base64EncodeWebSafe(JSON.stringify(data)));
}

function unPad(b64) {
  return b64 ? b64.split('=')[0] : b64;  
}
